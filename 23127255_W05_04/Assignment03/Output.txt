Base constructor-0 param
-> Base b1 được khởi tạo không tham số với hàm Base()

Base constructor-1 param
-> Base b2(3) được khởi tạo với một tham số nên hàm Base(int) được gọi

Base constructor-1 param
-> Base *pb = new Base(1) được cấp phát động với một tham số nên Base(int) được gọi

Base constructor-0 param
DerivedA constructor-0 param
-> DerivedA được khởi tạo không tham số với hàm DerivedA() gọi sang hàm Base() trước khi thân của DerivedA được chạy

Base constructor-0 param
DerivedA constructor-1 param
-> DerivedA da2(2) được khởi tạo với một tham số int nên DerivedA(int) được gọi và gọi sang hàm Base() trước khi phần
thân DerivedA(int) chạy

Base constructor-0 param
DerivedA constructor-2 params
-> Tương tự trên nhưng DerivedA được khởi tọa với hai tham số.

Base constructor-0 param
-> DerivedA(const DerivedA &da) được gọi, khởi tạo Base() tự động và chạy trước thân DerivedA(const DerivedA &da).
Không có output trong hàm DerivedA(const DerivedA &da) nên chỉ có mỗi output của Base constructor 0

Base constructor-0 param
DerivedA constructor-2 params
-> pb = new DerivedA(4, 5) được cấp phát động với hai tham số nên hàm Derived(int, int) chạy và gọi sang hàm Base()
trước khi thân của DerivedA(int, int) chạy, sau đó con trỏ trỏ được hiểu là trỏ tới Base

Base constructor-0 param
DerivedB constructor-0 param
-> DerivedB db1 tương tự DerivedA, Base được khởi tạo và gọi trước rồi tới thân của DerivedB

Base constructor-0 param
DerivedB constructor-1 param
-> DerivedB db2(2.7) gọi sang Base() trước khi thân DerivedB db2(float) chạy

Base constructor-1 param
DerivedB constructor-2 params
-> DerivedB(int u, float x) gọi sang Base(int) trước khi thân DerivedB(int u, float x) chạy

Base copy constructor
DerivedB copy constructor
-> DerivedB(const DerivedB &db) gọi sang Base(db) trước khi thân DerivedB(const DerivedB &db) chạy

Base constructor-1 param
DerivedB constructor-2 params
-> pb = new DerivedB(4, 5) được cấp phát động với hai tham số DerivedB(int, float) và gọi sang Base(4) trước khi phần
thân DerivedB(int, float) chạy

Base copy constructor
Function f
Base destructor
-> f(b1) được gọi thì b1 được copy sang Base b tạm (gọi Base copy constructor) rồi phần thân hàm f chạy.
Khi ra khỏi scope hàm, stack giải phóng nên Base destructor được gọi.

Base copy constructor
Function f
Base destructor
-> f(da1) được gọi thì da1 được copy, hiểu như type Base (gọi Base copy constructor) rồi phần thân hàm f được chạy.
Khi ra khỏi scope hàm, stack giải phóng nên Base destrcutor được gọi.

Base copy constructor
Function f
Base destructor
-> f(db1) được gọi thì da1 được copy, hiểu như type Base (gọi Base copy constructor) rồi phần thân hàm f được chạy.
Khi ra khỏi scope hàm, stack giải phóng nên Base destrcutor được gọi.

Base destructor
-> delete pb -> Giải phóng Base pb được cấp phát động nên hàm Base destructor được gọi. Vì db2 được hiểu là con trỏ trỏ
tới Base nên nên không gọi destructor của DerivedB(). Ngoài ra trước đó rò rĩ địa chỉ của Base() và DerivedA() được cấp
phát trước đó.

--------------------------------------------------------------
-> Ở dưới đây, khi ra khỏi scope, stack được giải phóng. Vì vậy nên tuân theo quy tắc LiFo (Last in First out), nên những
thứ vào stack đằng sau sẽ được giải phóng trước.

DerivedB destructor
Base destructor
-> db4 được giải phóng -> ~DerivedB() -> ~Base()
DerivedB destructor
Base destructor
-> db3 được giải phóng -> ~DerivedB() -> ~Base()
DerivedB destructor
Base destructor
-> db2 được giải phóng -> ~DerivedB() -> ~Base()
DerivedB destructor
Base destructor
-> db1 được giải phóng -> ~DerivedB() -> ~Base()
DerivedA destructor
Base destructor
-> da4 được giải phóng -> ~DerivedA() -> ~Base()
DerivedA destructor
Base destructor
-> da3 được giải phóng -> ~DerivedA() -> ~Base()
DerivedA destructor
Base destructor
-> da2 được giải phóng -> ~DerivedA() -> ~Base()
DerivedA destructor
Base destructor
-> da1 được giải phóng -> ~DerivedA() -> ~Base()
Base destructor
-> b2 được giải phóng -> ~Base()
Base destructor
-> b1 được giải phóng -> ~Base()
